package ir.markazandroid.unimakeup;

import android.annotation.SuppressLint;
import android.content.Context;
import android.graphics.ImageFormat;
import android.hardware.camera2.CameraAccessException;
import android.hardware.camera2.CameraCaptureSession;
import android.hardware.camera2.CameraDevice;
import android.hardware.camera2.CameraManager;
import android.hardware.camera2.CaptureRequest;
import android.media.ImageReader;
import android.os.Looper;
import android.util.Log;

import java.util.Arrays;

/**
 * Coded by Ali on 5/28/2019.
 */
public class Camera2Api {

    /**
     * An {@link ImageReader} that handles preview frame capture.
     */
    private ImageReader previewReader;

    /**
     * {@link android.hardware.camera2.CaptureRequest.Builder} for the camera preview
     */
    private CaptureRequest.Builder previewRequestBuilder;

    /**
     * {@link CaptureRequest} generated by {@link #previewRequestBuilder}
     */

    private CameraDevice cameraDevice;

    private CaptureRequest previewRequest;
    private Context context;

    /**
     * A {@link CameraCaptureSession } for camera preview.
     */
    private CameraCaptureSession captureSession;
    private ImageReader.OnImageAvailableListener frameAva;

    private int width, height;


    private final CameraDevice.StateCallback stateCallback =
            new CameraDevice.StateCallback() {
                @Override
                public void onOpened(final CameraDevice cd) {
                    // This method is called when the camera is opened.  We start camera preview here.
                    //cameraOpenCloseLock.release();
                    cameraDevice = cd;
                    try {
                        init();
                    } catch (CameraAccessException e) {
                        e.printStackTrace();
                    }
                }

                @Override
                public void onDisconnected(final CameraDevice cd) {
                    //cameraOpenCloseLock.release();
                    cd.close();
                    cameraDevice = null;

                    /*if (mOnGetPreviewListener != null) {
                        mOnGetPreviewListener.deInitialize();
                    }*/
                }

                @Override
                public void onError(final CameraDevice cd, final int error) {
                    cd.close();
                    cameraDevice = null;
                }
            };

    public Camera2Api(Context context, ImageReader.OnImageAvailableListener frameAva) {
        this.context = context;
        this.frameAva = frameAva;
    }

    private void init() throws CameraAccessException {
        // We set up a CaptureRequest.Builder with the output Surface.
        previewRequestBuilder = cameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);
        //previewRequestBuilder.addTarget(surface);


        // Create the reader for the preview frames.
        previewReader =
                ImageReader.newInstance(
                        width, height, ImageFormat.YUV_420_888, 1);

        previewReader.setOnImageAvailableListener(frameAva,null);

        previewRequestBuilder.addTarget(previewReader.getSurface());

        cameraDevice.createCaptureSession(
                Arrays.asList(previewReader.getSurface()), new CameraCaptureSession.StateCallback() {

                    @Override
                    public void onConfigured(final CameraCaptureSession cameraCaptureSession) {
                        // The camera is already closed
                        if (null == cameraDevice) {
                            return;
                        }

                        // When the session is ready, we start displaying the preview.
                        captureSession = cameraCaptureSession;
                        try {
                            // Auto focus should be continuous for camera preview.
                            previewRequestBuilder.set(
                                    CaptureRequest.CONTROL_AF_MODE,
                                    CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);
                            // Flash is automatically enabled when necessary.
                            previewRequestBuilder.set(
                                    CaptureRequest.CONTROL_AE_MODE, CaptureRequest.CONTROL_AE_MODE_ON_AUTO_FLASH);

                            // Finally, we start displaying the camera preview.
                            previewRequest = previewRequestBuilder.build();
                            captureSession.setRepeatingRequest(
                                    previewRequest, null,null);
                        } catch (final CameraAccessException e) {
                        }
                    }

                    @Override
                    public void onConfigureFailed(final CameraCaptureSession cameraCaptureSession) {
                    }
                },
                null);

        //mOnGetPreviewListener.initialize(getActivity().getApplicationContext(), getActivity().getAssets(), mScoreView, inferenceHandler);
    }

    /**
     * Opens the camera specified by .
     */
    @SuppressLint("MissingPermission")
    public void openCamera(final int width, final int height) {
        Log.d("dis", "width " + width + "height " + height);
        this.width=width;
        this.height=height;
        final CameraManager manager = (CameraManager) context.getSystemService(Context.CAMERA_SERVICE);
        try {
            manager.openCamera(manager.getCameraIdList()[0], stateCallback,null);
        } catch (final CameraAccessException e) {
        }

    }

    /**
     * Closes the current {@link CameraDevice}.
     */
    public void closeCamera() {
        if (null != captureSession) {
            captureSession.close();
            captureSession = null;
        }
        if (null != cameraDevice) {
            cameraDevice.close();
            cameraDevice = null;
        }
        if (null != previewReader) {
            previewReader.close();
            previewReader = null;
        }
    }
}
